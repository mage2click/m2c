#!/bin/bash

declare -r m2c_version="0.10.5"
declare -r m2c_os="$(uname -s | awk '{print tolower($0)}')"
declare -r m2c_global_dir="$(echo ~/.m2c)"
declare m2c_loading_pid=

m2c_logo() {
    local logo='
                                       ___
                             ____ ___ |__ \ _____
                            / __ `__ \__/ // ___/
                           / / / / / / __// /__
                          /_/ /_/ /_/____/\___/
    '

    echo -e "\033[1;33m$logo
                                Mage2click
                              Magento Docker
                          environment and toolset
                                 v$m2c_version
\033[0m"
}

m2c_loading() {
    tput civis
    m2c_start_spinner & m2c_loading_pid=$!
    sleep 0.1
}

m2c_loading_install() {
    tput civis
    m2c_start_progress & m2c_loading_pid=$!
    sleep 0.1
}

m2c_start_spinner() {
    local sp=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏')
    #local sp=('/' '—' '\' '|')
    #local sp=('◐' '◓' '◑' '◒')
    #local sp=('◢' '◣' '◤' '◥')

    printf "\033[1;33m"

    while [[ "$(ps a | awk '{print $1}' | grep $$)" ]]
    do
        for i in "${sp[@]}"
        do
            echo -en "\b$i"
            sleep 0.1
        done
    done

    printf "\033[0m"
}

m2c_start_progress() {
    local sp=('⠋' '⠙' '⠹' '⠸' '⠼' '⠴' '⠦' '⠧' '⠇' '⠏') iteration=0 length=0 log

    printf "\033[1;33m"

    while [[ "$(ps a | awk '{print $1}' | grep $$)" ]]
    do
        if [[ "$iteration" == "0" ]]
        then
            log="$(<${m2c_log})"

            if [[ "$log" == *"Progress:"* ]]
            then
                log=" $(echo "$log" | grep "Progress: " | tail -1 | tr -d "[Proges: ]")  "
                length=${#log}
                printf %${length}s | tr " " "\b"
                echo -en "$log"
            fi
        fi

        for i in "${sp[@]}"
        do
            echo -en "\b$i"
            (( iteration++ ))
            sleep 0.1
        done

        [[ "$iteration" == "10" ]] && iteration=0
    done

    printf %${length}s | tr " " "."
    printf "\033[0m"
}

m2c_stop_spinner() {
    if [[ -n ${m2c_loading_pid} ]]
    then
        kill ${m2c_loading_pid} && \
        wait ${m2c_loading_pid} >/dev/null 2>&1
        m2c_loading_pid=
    fi

    printf "\b\033[0m"
}

m2c_trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

m2c_msg() {
    local text="$1"
    local chars=$((${#text}))
    local cols=$(tput cols)

    if [[ $chars -gt $cols ]]
    then
        text="$(echo "$text" | fold -s -w"$cols")"
    fi

    echo -en "\033[0;32m$text\033[0m"
}

m2c_info() {
    echo -en "\033[0;33m$@\033[0m"
}

m2c_info_bold() {
    echo -en "\033[1;33m$@\033[0m"
}

m2c_dots() {
    local text="$1"
    local chars=$((${#text} + 3))
    local cols=$(tput cols)
    local last

    cols=$(( cols > 80 ? 80 : cols ))

    if [[ $chars -gt $cols ]]
    then
        text="$(echo "$text" | fold -s -w"$cols")"
        last="${text##*$'\n'}"
        chars=$((${#last} + 3))
    fi

    m2c_msg "$text$(printf %$((cols - chars))s | tr " " ".")  "
}

m2c_error() {
    echo -en "\033[0;31m$@\033[0m"
}

m2c_error_bold() {
    echo -en "\033[1;31m$@\033[0m"
}

m2c_result() {
    local res=$1 \
          noexit=$2 \
          error

    m2c_stop_spinner >/dev/null 2>&1
    tput cnorm

    if [[ $1 -eq 0 ]]
    then
        m2c_info_bold "\b✔\n"
    else
        m2c_error_bold "\b✘\n"

        if [[ -f "${m2c_log}" ]]
        then
            error="$(<"${m2c_log}")"
            [[ -n ${error} ]] && m2c_error "$error\n"
        fi

        [[ -z ${noexit} ]] && exit 1
    fi
}

m2c_ask_bool() {
    local message=$1 \
          only_y=$2 \
          opts \
          res \
          text \
          lines

    tput cnorm
    stty echo

    if [[ -z ${only_y} ]]
    then
        opts="[Y/n]"
    else
        opts="[Y]"
    fi

    while :
    do
        text="$(m2c_msg "$message $(m2c_info_bold "$opts")") "
        lines=$(echo "$text" | wc -l)
        read -n 1 -srp "$text" res
        echo
        m2c_erase_prev_lines ${lines}
        if [[ "$res" = "Y" || "$res" = "y" ]]
        then
            m2c_msg "$message $(m2c_info_bold "[$res]")\n"
            res=1
            break
        elif [[ -z ${only_y} ]] && [[ "$res" = "N" || "$res" = "n" ]]
        then
            m2c_msg "$message $(m2c_info_bold "[$res]")\n"
            res=
            break
        fi
    done

    m2c_res=${res}

    stty -echo
    tput civis
}

m2c_ask_text() {
    local message=$1 \
          default=$2 \
          error=$3 \
          error_info=$4 \
          validate=$5 \
          validate_value=() \
          res res_count \
          error_count valid=1

    shift
    shift
    shift
    shift
    shift

    validate_value=("$@")

    tput cnorm
    stty echo

    temp_term=${TERM}; TERM=vt100;

    while [[ -z ${res} || -z ${valid} ]]
    do
        valid=
        error_count=0

        exec 5>&1

        message=$(m2c_msg "$message")

        if [[ -n ${default} ]]
        then
            echo -e "$message $(m2c_info_bold "[$default]")"
        else
            echo -e "$message"
        fi

        if [[ -n ${res} && -z ${valid} ]]
        then
            error_count="$(echo -en "$(m2c_error "$(printf "$error" "$res")\n"; \
                [[ -n ${error_info} ]] && m2c_error "$error_info")" | tee >(cat - >&5))"
            error_count="$(echo -en "$error_count" | awk 'END { print NR }')"
        fi

        read -r res
        res_count=$(echo "$res" | awk 'END { print NR }')

        [[ ${error_count} -eq 0 ]] && (( res_count++ ))

        while IFS= read line
        do
           res="$line"
        done < <(printf '%s\n' "$res")

        m2c_erase_prev_lines $((( res_count + error_count )))

        res=$(m2c_trim "$res" | tr -dc '[:print:]')

        if [[ -z ${res} ]]
        then
            res="$default"
        fi

        if ${validate} "$res" "${validate_value[@]}"
        then
            valid=1
            m2c_res="$res"
        fi
    done

    TERM=${temp_term}

    exec 5>&-

    echo -e "$message $(m2c_info_bold "[$res]")"

    stty -echo
    tput civis
}

m2c_erase_current_line() {
    echo -ne "\033[999D\033[K\033[999D"
}

m2c_erase_prev_lines() {
    local count=${1:-1}

    while (( count > 0 ))
    do
        tput cuu 1 && tput el
        (( count-- ))
    done
}

m2c_in_array () {
    local entry match="$1"
    shift
    for entry; do
        [[ "$entry" == "$match" ]] && return 0
    done
    return 1
}

m2c_requirements() {
    local test pass=1

    m2c_info_bold "\n[Checking requirements]\n\n"

    m2c_dots "OS compatibility check"
    m2c_loading

    case ${m2c_os} in
        darwin|linux)
            m2c_result 0
        ;;
        *)
            echo "Currently we are not supporting $m2c_os based OS yet." >"${m2c_log}"
            m2c_result 1 1
            pass=0
        ;;
    esac

    m2c_dots "Docker installation check"
    m2c_loading
    hash docker 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker command line interface was not found." >"${m2c_log}"

    m2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    m2c_dots "Docker-compose installation check"
    m2c_loading
    hash docker-compose 2>/dev/null
    test=$?

    [[ "$test" == "1" ]] && echo "Docker-compose command line interface was not found." >"${m2c_log}"

    m2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    test=0
    m2c_dots "Ports 80, 443, 33060 and 53 availability check"
    m2c_loading

    local ports=

    if [[ -z "$(docker ps \
                    --filter "label=com.docker.compose.project=m2c" \
                    --filter "label=com.docker.compose.service=traefik" \
                    -q)" ]]
    then
        if lsof -PiTCP:80 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            ports="TCP 80"
        fi

        if lsof -PiTCP:443 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            if [[ -z ${ports} ]]
            then
                ports="TCP 443"
            else
                ports="$ports, 443"
            fi
        fi

        if lsof -PiTCP:33060 -sTCP:LISTEN -t >/dev/null 2>&1
        then
            if [[ -z ${ports} ]]
            then
                ports="TCP 33060"
            else
                ports="$ports, 33060"
            fi
        fi
    fi

    if [[ -z "$(docker ps \
                    --filter "label=com.docker.compose.project=m2c" \
                    --filter "label=com.docker.compose.service=dnsmasq" \
                    -q)" ]] && lsof -PiUDP:53 -tn >/dev/null 2>&1
    then
        if [[ -z ${ports} ]]
        then
            ports="UDP 53"
        else
            ports="$ports and UDP 53"
        fi
    fi

    if [[ -n ${ports} ]]
    then
        test=1
        echo "$ports already used by some other service(s).\n" >"${m2c_log}"
    fi

    m2c_result ${test} 1

    [[ ${test} -eq 0 ]] || pass=0

    if [[ ${pass} -eq 0 ]]
    then
        exit 1
    fi

    m2c_dots "Password required to trust the CA certificate and create symlinks"
    m2c_loading
    m2c_result 0
    tput cnorm
    while ! sudo -p "$(printf "\033[0mPassword:")$(printf "\033[1;31m%s" " ")" true
    do
        exit 1
    done
    tput civis
    m2c_erase_prev_lines 1
}

m2c_install() {
    local m2c_archive m2c_test

    m2c_info_bold "\n[Installing commands]\n\n"

    m2c_dots "Locating archive"
    m2c_loading
    m2c_archive=$(awk '/^__ARCHIVED__/ {print NR + 1; exit 0; }' "${0}")
    m2c_test=$?
    m2c_result ${m2c_test}

    m2c_dots "Extracting data"
    m2c_loading 2
    tail -n+${m2c_archive} "${0}" | tar -xzp -C ~ && >"${m2c_log}" 2>&1
    m2c_test=$?
    if [[ "$m2c_test" == "0" ]]
    then
        sudo ln -sf "${m2c_global_dir}/bin/m2c" /usr/local/bin/m2c

        if [[ ! -f "${m2c_global_dir}/ssl/config/v3_ext.conf" ]]
        then
            mv "${m2c_global_dir}/ssl/config/v3_ext.blank.conf" "${m2c_global_dir}/ssl/config/v3_ext.conf"
        else
            rm -f "${m2c_global_dir}/ssl/config/v3_ext.blank.conf"
        fi

        if [[ ! -f "${m2c_global_dir}/.env" ]]
        then
            yes | cp -rf "${m2c_global_dir}/docker/.env" "${m2c_global_dir}/" >/dev/null 2>&1
        fi
    fi
    m2c_result ${m2c_test}

    if [[ ! -f "${m2c_global_dir}/ssl/certs/rootCA.crt" ]] || [[ ! -f "${m2c_global_dir}/ssl/private/rootCA.key" ]]
    then
        m2c_info_bold "\n[Installing CA certificate]\n\n"

        pass="m2c0"

        m2c_dots "Generating private key for CA certificate"
        m2c_loading
        mkdir -p "${m2c_global_dir}/ssl"/{certs,crl,new,private,serial} >"${m2c_log}" 2>&1 && \
        openssl genrsa -aes256 -passout pass:${pass} -out "${m2c_global_dir}/ssl/private/rootCA.key" 4096 >"${m2c_log}" 2>&1
        m2c_test=$?
        m2c_result ${m2c_test}

        m2c_dots "Signing CA certificate"
        m2c_loading
        openssl req -new -x509 -nodes -sha256 -days 825 \
            -passin pass:${pass} -subj "/O=Mage2click/OU=IT/CN=m2c.local" \
            -config "${m2c_global_dir}/ssl/config/rootca.conf" \
            -key "${m2c_global_dir}/ssl/private/rootCA.key" \
            -out "${m2c_global_dir}/ssl/certs/rootCA.crt" >"${m2c_log}" 2>&1
        m2c_test=$?
        m2c_result ${m2c_test}

        m2c_dots "Trusting root CA certificate"
        m2c_loading
        case "$m2c_os" in
            darwin)
                sudo security delete-certificate -c 'm2c.local' >/dev/null 2>&1
                sudo security add-trusted-cert -d -r trustRoot \
                        -k /Library/Keychains/System.keychain "${m2c_global_dir}/ssl/certs/rootCA.crt" >"${m2c_log}" 2>&1
                m2c_test=$?
            ;;
            linux)
                if [[ -d /usr/local/share/ca-certificates ]]
                then
                    yes | sudo cp -rf "${m2c_global_dir}/ssl/certs/rootCA.crt" \
                        /usr/local/share/ca-certificates/m2c-root-ca.crt >"${m2c_log}" 2>&1 && \
                    sudo update-ca-certificates >"${m2c_log}" 2>&1
                    m2c_test=$?
                elif [[ -d /etc/pki/ca-trust/source/anchors ]]
                then
                    yes | sudo cp -rf "${m2c_global_dir}/ssl/certs/rootCA.crt" \
                        /etc/pki/ca-trust/source/anchors/m2c-root-ca.crt >"${m2c_log}" 2>&1 && \
                    sudo update-ca-trust >"${m2c_log}" 2>&1 && \
                    sudo update-ca-trust enable >"${m2c_log}" 2>&1
                    m2c_test=$?
                else
                    echo "Currently, we are not supporting yet trusting of the root CA certificate on your OS." >"${m2c_log}"
                    m2c_test=1
                fi
            ;;
        esac
        m2c_result ${m2c_test}
    fi

    case ${m2c_os} in
        darwin)
            if [[ ! -f /etc/resolver/test || \
                "$(</etc/resolver/test)" != "nameserver 127.0.0.1" ]]
            then
                m2c_info_bold "\n[Configuring .test domains resolver]\n\n"

                m2c_dots "Creating the resolver file"
                m2c_loading
                sudo mkdir -p /etc/resolver && \
                sudo bash -c 'echo "nameserver 127.0.0.1" > /etc/resolver/test'
                m2c_result $?
            fi

            if [[ ! -f "${m2c_global_dir}/mutagen/mutagen" || \
                "$("${m2c_global_dir}/mutagen/mutagen" version)" != "0.11.8" ]]
            then
                if [[ ! -f "${m2c_global_dir}/mutagen/mutagen" ]]
                then
                    m2c_info_bold "\n[Installing Mutagen]\n\n"
                    mkdir -p "${m2c_global_dir}/mutagen" >"${m2c_log}" 2>&1
                else
                    m2c_info_bold "\n[Updating Mutagen]\n\n"
                fi

                curl -L \
                    "https://github.com/mutagen-io/mutagen/releases/download/v0.11.8/mutagen_darwin_amd64_v0.11.8.tar.gz" | \
                    tar xzf - -o -C "${m2c_global_dir}/mutagen/"
                chmod 0755 "${m2c_global_dir}/mutagen/mutagen"
            fi
        ;;
    esac
}

m2c_on_exit() {
    m2c_stop_spinner
    stty echo
    tput cnorm
    echo

    if [[ "$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")" != "m2c" ]]
    then
        rm -- "$0"
    fi
}

trap m2c_on_exit EXIT

m2c_log="${m2c_global_dir}/log"
mkdir -p "${m2c_global_dir}"
touch "${m2c_log}"

if ! docker info > /dev/null 2>&1
then
    m2c_error "Docker is not running or Docker service is not reachable.\n"
    exit 1
fi

if ! docker info > /dev/null 2>&1
then
    m2c_error "Docker is not running or Docker service is not reachable.\n"
    exit 1
fi

if [[ "$0" != "/usr/local/bin/m2c" ]]
then
    m2c_logo

    if [[ ! -f "${m2c_global_dir}/build" ]]
    then
        message="Install Mage2click Magento Docker environment and toolset to your system?"
    else
        m2c_is_update=1
        m2c_res="$(m2c --version 2>/dev/null | tr -dc '[:print:]' | sed 's/\[0m\[?12l\[?25h//')"

        if [[ "$m2c_res" == "$m2c_version" ]]
        then
            message="Hooray! You have the latest version of Mage2click toolset. Reinstall?"
        else
            message="Mage2click toolset v$m2c_res is found on your system. Update it to v$m2c_version?"
        fi
    fi

    m2c_ask_bool "$(echo -n "$message")"

    if [[ -z ${m2c_res} ]]
    then
        exit 0
    fi

    m2c_requirements
    rm -rf "${m2c_global_dir}"/{bin,completions,dnsmasq,docker,functions,local,traefik,www,build} >/dev/null 2>&1
    m2c_install
    . "${m2c_global_dir}/functions/m2c"

    m2c_global_load_env
    m2c_global_save_env

    m2c_sign "m2c.test"

    m2c_global up

    m2c_info_bold "\n[Installation finished]\n\n"

    m2c_msg "Mage2click toolset is successfully installed!\n"
    m2c_msg "Run \`m2c --help\` command for usage information.\n"
    m2c_msg "Visit local https://m2c.test to check useful links to included services.\n\n"

    if [[ -z ${m2c_is_update} ]]
    then
        m2c_ask_bool "Initialize new project in the current directory?"

        if [[ -n ${m2c_res} ]]
        then
            m2c_init
        fi
    fi
else
    . "${m2c_global_dir}/functions/m2c"
    declare -r m2c_project_dir="$(m2c_get_project_dir)"
    m2c_log="${m2c_project_dir}/.m2c/log"

    m2c_load_env

    case "$1" in
        global)
            shift
            m2c_global_load_env
            m2c_log="${m2c_global_dir}/log"
            m2c_global $@
        ;;
        init)
            shift
            m2c_init $@
        ;;
        sign)
            shift
            m2c_sign $@
        ;;
        --version)
            echo -n "$m2c_version"
        ;;
        --help)
            m2c_help
        ;;
        *)
            case "$1" in
                up|down)
                    ! m2c_in_array "--help" $@ && m2c_local_project_check_dir
                    m2c_local $@
                ;;
                add|info|remove|restart|start|status|stop|update)
                    ! m2c_in_array "--help" $@ && m2c_local_project_check
                    m2c_local $@
                ;;
                bash|cli|composer|db|grunt|magento|m|magerun|mr|mutagen|node|npm|pull|push|pwa|redis|share|sync|varnish|urn)
                    ! m2c_in_array "--help" $@ && m2c_local_active_project_check

                    m2c_res=$1
                    shift

                    if [[ "$m2c_res" == "m" ]]
                    then
                        m2c_res="magento"
                    elif [[ "$m2c_res" == "mr" ]]
                    then
                        m2c_res="magerun"
                    fi

                    [[ $(type -t m2c_${m2c_res}) == "function" ]] && m2c_${m2c_res} $@
                ;;
                *)
                    if [[ "$1" != "" ]]
                    then
                        m2c_error "Unknown argument \`$@\`. Run \`m2c --help\` for usage information.\n"
                        exit 1
                    else
                        m2c_help
                    fi
                ;;
            esac
        ;;
    esac
fi
